{"project": "arviz", "project_url": "https://arviz-devs.github.io/arviz/", "show_commit_url": "https://github.com/Ban-zee/arviz/commit/", "hash_length": 8, "revision_to_hash": {"352": "b26009c619f91190005c0a65e4aa1884e27bb464", "463": "f05b9dbda31d193a7f8d8521b94d4d64c4fd2c63", "465": "ea6c34e96cfb012f48b115aabb3da5dad5b01da8", "531": "4e5a03295538e9b27542fdb7ae7d09584b937b97", "626": "27a0cef15b4965a8040721629fa19a63567f7458", "749": "b35207d6d7d66c979674a369a0f393109b70eb30", "814": "1a810ee3b92bfd8999f4d2fabebf9368f3883caf", "826": "6c0f3a7f123d31f50a0eab1934332841ef3a8bfa"}, "revision_to_date": {"352": 1537560050000, "463": 1544829642000, "465": 1545137687000, "531": 1547571483000, "626": 1550957366000, "749": 1558323520000, "814": 1560130386000, "826": 1560676827000}, "params": {"arch": ["x86_64"], "cpu": ["Intel(R) Core(TM) i3-5005U CPU @ 2.00GHz"], "machine": ["Banzee"], "num_cpu": ["4"], "os": ["Linux 4.15.0-51-generic"], "ram": ["3957136"], "python": ["3.6"], "numba": ["", null], "numpy": [""], "six": ["", null], "branch": ["master"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "Intel(R) Core(TM) i3-5005U CPU @ 2.00GHz", "machine": "Banzee", "num_cpu": "4", "os": "Linux 4.15.0-51-generic", "ram": "3957136", "python": "3.6", "numpy": "", "branch": "master", "numba": null, "six": null}, {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i3-5005U CPU @ 2.00GHz", "machine": "Banzee", "num_cpu": "4", "os": "Linux 4.15.0-51-generic", "ram": "3957136", "python": "3.6", "numba": "", "numpy": "", "branch": "master", "six": null}], "benchmarks": {"benchmarks.CircStd.time_circ_std": {"code": "class CircStd:\n    def time_circ_std(self):\n        try:\n            data = np.random.randn(10000,1000)\n            import numba\n            def _circfunc(samples, high, low):\n                samples = np.asarray(samples)\n                if samples.size == 0:\n                    return np.nan, np.nan\n                return samples, _angle(samples, low, high, np.pi)\n    \n    \n            @numba.vectorize\n            def _angle(samples, low, high, pi=np.pi):\n                ang = (samples - low) * 2.0 * pi / (high - low)\n                return ang\n    \n    \n            def _circular_standard_deviation(samples, high=2 * np.pi, low=0, axis=None):\n                pi = np.pi\n                samples, ang = _circfunc(samples, high, low)\n                S = np.sin(ang).mean(axis=axis)\n                C = np.cos(ang).mean(axis=axis)\n                R = np.hypot(S, C)\n                return ((high - low) / 2.0 / pi) * np.sqrt(-2 * np.log(R))\n        except ImportError:\n            return st.circstd(data)", "min_run_count": 2, "name": "benchmarks.CircStd.time_circ_std", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "8336f6745c7c18e7351b0d63276786a51250015a86eb99ec19f1cc7e598db585", "warmup_time": -1}, "benchmarks.Hist.time_histogram": {"code": "class Hist:\n    def time_histogram(self):\n    \ttry:\n    \t\tdata = np.random.rand(10000, 1000)\n    \t\timport numba\n    \n    \t\t@numba.njit(cache=True)\n    \t\tdef _hist(data):\n    \t\t\treturn np.histogram(data, bins=100)\n    \t\treturn _hist(data)\n    \texcept ImportError:\n    \t\treturn np.histogram(data, bins=100)", "min_run_count": 2, "name": "benchmarks.Hist.time_histogram", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "d67dfa5dadd652b35c9f25be62df9b1984a8d58a00a54e0e1bac3aec8de05f23", "warmup_time": -1}, "benchmarks.Variance.time_variance": {"code": "class Variance:\n    def time_variance(self):\n    \ttry:\n    \t\tdata_1 = np.random.randn(100000)\n    \t\tdata_2 = np.random.randn(10000,10000)\n    \t\timport numba\n    \n    \t\t@numba.njit(cache=True)\n    \t\tdef stats_variance_1d(data, ddof=0):\n    \t\t\ta,b = 0,0\n    \t\t\tfor i in data:\n    \t\t\t\ta = a + i\n    \t\t\t\tb = b + i * i\n    \t\t\tvar = b / (len(data)) - ((a / (len(data))) ** 2)\n    \t\t\tvar = var * (len(data) / (len(data) - ddof))\n    \t\t\treturn var\n    \n    \t\t@numba.njit(cache=True)\n    \t\tdef stats_variance_2d(data, ddof=0, axis=1):\n    \t\t\ta, b = data.shape\n    \t\t\tif axis == 1:\n    \t\t\t\tvar = np.zeros(a)\n    \t\t\t\tfor i in range(a):\n    \t\t\t\t\tvar[i] = stats_variance_1d(data[i], ddof=ddof)\n    \t\t\telse:\n    \t\t\t\tvar = np.zeros(b)\n    \t\t\t\tfor i in range(b):\n    \t\t\t\t\tvar[i] = stats_variance_1d(data[:, i], ddof=ddof)\n    \t\t\treturn var\n    \t\treturn stats_variance_2d(data_2)\n    \texcept ImportError:\n    \t\treturn np.var(data_2, axis=1)", "min_run_count": 2, "name": "benchmarks.Variance.time_variance", "number": 0, "param_names": [], "params": [], "processes": 2, "repeat": 0, "sample_time": 0.01, "timeout": 60.0, "type": "time", "unit": "seconds", "version": "4cd7e090636601f109a3001485bd517fd1ddada6e03f8248f454732e23b92dfd", "warmup_time": -1}}, "machines": {"Banzee": {"arch": "x86_64", "cpu": "Intel(R) Core(TM) i3-5005U CPU @ 2.00GHz", "machine": "Banzee", "num_cpu": "4", "os": "Linux 4.15.0-51-generic", "ram": "3957136", "version": 1}}, "tags": {"0.1.0": 352, "0.3.3": 626, "0.4.0": 749, "0.4.1": 814, "v0.3.0": 463, "v0.3.1": 465, "v0.3.2": 531}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}